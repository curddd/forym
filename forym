#!/usr/bin/perl
use strict;
use warnings;
use Data::Dumper;

use List::Util qw(max);
=aufbau

+topic
+reply
?topic_nr_name

=cut

my $LISTENADDR = "0.0.0.0";
my $PORT = 8081;

my $mod_time = 0;
my $TIME_MOD = 1000;

use IO::Socket;

my $server = IO::Socket::INET->new(
		LocalAddr => $LISTENADDR,
		LocalPort => $PORT,
		Listen	=> SOMAXCONN,
		Proto	 => 'tcp',
		ReuseAddr => 1,
) or die "Can't create server on port $PORT: $!\n";

print "Server is listening on http://localhost:$PORT\n";


my $SUBMIT_NEW_TOPIC = '
	<h3>new topic</h3>
	<form action="/+topic" method="POST" enctype="text/plain">
		<textarea rows="14" cols="80" name="topic"></textarea><br>
		<button type="submit">submit new topic</button>
	</form>
';

my $SUBMIT_NEW_REPLY = '
	<h3>new reply</h3>
	<form action="+reply+TOPIC" method="POST" enctype="text/plain">
		<textarea rows="14" cols="80" name="reply"></textarea><br>
		<button type="submit">submit new reply</button>
	</form>
';



sub generic_response{
	(my $client, my $text) = (@_);
	print $client "HTTP/1.1 200 OK\r\n\r\n";
	print $client $text;
	goto end;

}


sub get_mod_timestamp{
	$mod_time = ($mod_time+1) % $TIME_MOD;
	return sprintf("%d%03d",time(),$mod_time);
}

my $per_page = 35;
sub index{
	my ($client, $page, $search) = @_;

	my @topics;
	if(defined $search){
		@topics = split('\n',`ls -1t topics | grep $search`);
	}
	else{
		@topics = split('\n',`ls -1t topics`);
	}


	my $c_min = $page*$per_page;
	my $c_end = ($page+1)*$per_page;
	my $c = 0;	
	my @links = ();
	foreach(@topics){
		if($c<$c_min){
			$c++;
			next;
		}
		if($c>$c_end){
			last;
		}
		$c++;
		chomp(my $c = `ls -1 topics/$_ | wc -l`);
		my $t = `cat topics/$_\/\$(ls -1rt topics/$_ | head -n1)`;
		my @t = split(/\n/,$t);
		$t = $t[0];
		push(@links,"<a href='/topic_$_'>$t ($c)</a><br>");
	}

	print $client "HTTP/1.1 200 OK\r\n\r\n";

	my $page_c = int(scalar(@topics)/$per_page);

	my $pagination = "<b>pages</b> >> ";
	for(my $i=0;$i<=$page_c;$i++){
		if($i==$page){
			if(defined $search){
				$pagination .= "<a href='/page=$i&search=$search'>[$i]</a> ";
			}
			else{
				$pagination .= "<a href='/page=$i'>[$i]</a> ";
			}
			next;
		}
		if(defined $search){
	
			$pagination .= "<a href='/page=$i&search=$search'>$i</a> ";
		}
		else{
			$pagination .= "<a href='/page=$i'>$i</a> ";
		}
	}
	
	my $index = "
	<html>
	<h1>forym</h1>
	<head><meta charset='UTF-8'> <style>body{font-family:monospace;font-size:23px;}</style><head>
	<form method='GET' action='/'><input type='text' placeholder='search' name='search'></form>
	". join("",@links)."
	<hr>
	$pagination
	<hr>
	$SUBMIT_NEW_TOPIC
	</html>
	"
	;
	print $client $index;
}


sub new_topic{
	(my $client, my $body) = (@_);

	$body =~ s/^topic=//g;

	my @body = split('\n', $body);

	my $topic = shift(@body);
	my $topic_body = join('\n',@body);

	if(length($topic)==0){
		&generic_response($client, "no title");
	}

	if(length($topic_body)==0){
		&generic_response($client, "please provide topic body");
	}


	my $folder_name = $topic;
	$folder_name =~ s/\_//g;
	$folder_name =~ s/;//g;
	$folder_name = &get_mod_timestamp() . "_$folder_name";
	$folder_name =~ s/ /_/g;

	$folder_name = &word_filter($folder_name);
	$folder_name = quotemeta($folder_name);
	$folder_name =~ s/\\.//g;


	my $mkdir_res = `mkdir topics/$folder_name`; 

	if($mkdir_res =~ /Illegal byte sequence/){
		&generic_response($client, "illegal topic characters");
	}

	open my $w_out, ">", "topics/$folder_name/".&get_mod_timestamp();
	$body = &word_filter($body);
	$body =~ s/ /&nbsp;/g;
	print $w_out $body;
	close $w_out;


	print $client "HTTP/1.1 303 See Other\n";
	print $client "Location: /topic_$folder_name\r\n\r\n";

}

sub view_topic{
	(my $client, my $folder_name) = (@_);

	$folder_name = quotemeta($folder_name);


	if(! -e "topics/$folder_name"){
		&generic_response($client, "this topic does not exist");
	}



	print $client "HTTP/1.1 200 OK\r\n\r\n";
	print $client "<html>";

	print $client "<head><meta charset='UTF-8'><style>body{font-family:monospace;word-wrap:break-word;}</style></head>";

	my @replies = `ls -1 topics/$folder_name`;

	my $op = shift(@replies);
	$op =~ s/\n//g;


	open my $in, "<", "topics/$folder_name/$op";

	my $first = 1;
	while(<$in>){
		
		if($first){
			$_ =~ s/\n//g;
			print $client "<h1>$_</h1>";
			$first = 0;
			next;
		}
		$_ =~ s/\n/\<br\>/g;
		print $client $_;

	}
	close $in;

	foreach my $reply (@replies){
		$reply =~ s/\n//g;

		open my $in, "<", "topics/$folder_name/$reply";

		print $client "<hr>";
		while(<$in>){
			$_ =~ s/\n/\<br\>/g;
			$_ = &word_filter($_);
			print $client $_;
		}
		print $client "</div>";


		close $in;
	}   

	print $client "<hr>";
	my $reply_part = $SUBMIT_NEW_REPLY;
	$reply_part =~ s/TOPIC/$folder_name/;
	print $client $reply_part;
	print $client "</html>";



}

sub new_reply{
	(my $client, my $folder_name, my $body) = (@_);

	$folder_name = quotemeta($folder_name);
	if(! -e "topics/$folder_name"){
		&generic_response($client, "this topic does not exist");
	}

	$body =~ s/^reply=//g;
	if(length($body)==1){
		&generic_response($client, "empty reply");
	}
	

	open my $w_out, ">", "topics/$folder_name/".&get_mod_timestamp();
	$body = &word_filter($body);
	$body =~ s/ /&nbsp;/g;

	print $w_out $body;
	close $w_out;


	print $client "HTTP/1.1 303 See Other\n";
	print $client "Location: /topic_$folder_name\r\n\r\n";

}
my %words_filtered = ();

sub init_word_filter{
	open my $w_in, "<", "filter";
	while(<$w_in>){
	print $_;
		$_ =~ /(.+) (.+)/;
		$words_filtered{$1} = $2;
	}
	close $w_in;
}

sub word_filter{
	my ($body) = @_;
	my @arr = split(/ /,$body);
	my $idx = 0;
	for my $w (@arr){
		for my $bw (keys(%words_filtered)){
		#	if(lc($w) eq lc($bw)){
		#		$arr[$idx] = $words_filtered{$bw};
		#	}
		$w =~ s/$bw/$words_filtered{$bw}/gi;
		}
		$idx++;
	}
	$body = join(" ", @arr);
	return $body;
}

sub parse_request{
	(my $client_sock) = (@_);


	#request header
	my $req_headers = "";
	while (<$client_sock>) {
		$req_headers .= $_;
		last if $_ eq "\r\n";
	}
	my @headers = split("\r\n",$req_headers);

	if(!$headers[0]){
		return ("NIX","NIX","NIX");
	}
	
	#method, path
	(my $method, my $path) = split(' ', $headers[0]);
	if(!$path){
		$path = "/";
	}
	
	#body parsing
	$req_headers =~ /Content-Length: (\d+)/;
	my $content_length = $1;
	
	if(!$content_length){
		return ($method, $path, "");
	}

	my $body = "";
	my $aleady_read = 0;
	while($aleady_read<$content_length){
		$aleady_read += read($client_sock, my $line, $content_length-$aleady_read);
		$body .= $line;
	}

	$body =~ s/</&lt;/g;
	$body =~ s/>/&gt;/g;
	$body =~ s/\r//g;


	$body = &word_filter($body);

	return ($method, $path, $body);


}

sub glueckslotterie(){
	if(rand(1)>0.01){
		return;
	}	

	my @topics = split('\n',`ls -1t topics`);
	my $death = pop(@topics);
	`rm -rf topics/$death`;
	print "boom";
}
	

my %pids = ();

$SIG{CHLD} = 'IGNORE';


&init_word_filter();
while (my $client = $server->accept()){
	my $pid = fork();
	if($pid){
		$pids{$pid} = 1;
		next;
	}   
 
	(my $method, my $path, my $body) = &parse_request($client);


	if($path eq "" || $path eq "/"){
		&index($client,0);
		goto end;
	}
	
	if($path =~ /^\/page=([0-9]+)$/){
		&index($client, $1);
		goto end;
	}
	if($path =~ /^\/page=([0-9]+)&search=(.+)/){
		&index($client,$1,quotemeta($2));
		goto end;
	}
	if($path =~ /search=(.+)/){
		&index($client,0,quotemeta($1));
		goto end;
	}


	if($path =~ /^\/\+topic/){
		&new_topic($client, $body);
		goto end;
	}

	if($path =~ /^\/topic\_(.*)/){
		&view_topic($client, $1);
		goto end;
	}

	if($path =~ /\+reply\+(.*)/){
		&new_reply($client, $1, $body);
		goto end;
	}


	end:

	&glueckslotterie();
	$client->close();

	exit 0;	
}
$server->close();


